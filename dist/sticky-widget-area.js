/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-element-queries/index.js":
/*!***************************************************!*\
  !*** ./node_modules/css-element-queries/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = {\n  ResizeSensor: __webpack_require__(/*! ./src/ResizeSensor */ \"./node_modules/css-element-queries/src/ResizeSensor.js\"),\n  ElementQueries: __webpack_require__(/*! ./src/ElementQueries */ \"./node_modules/css-element-queries/src/ElementQueries.js\")\n};\n\n//# sourceURL=webpack:///./node_modules/css-element-queries/index.js?");

/***/ }),

/***/ "./node_modules/css-element-queries/src/ElementQueries.js":
/*!****************************************************************!*\
  !*** ./node_modules/css-element-queries/src/ElementQueries.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./ResizeSensor.js */ \"./node_modules/css-element-queries/src/ResizeSensor.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof window !== 'undefined' ? window : this, function (ResizeSensor) {\n  /**\n   *\n   * @type {Function}\n   * @constructor\n   */\n  var ElementQueries = function ElementQueries() {\n    //<style> element with our dynamically created styles\n    var cssStyleElement; //all rules found for element queries\n\n    var allQueries = {}; //association map to identify which selector belongs to a element from the animationstart event.\n\n    var idToSelectorMapping = [];\n    /**\n     *\n     * @param element\n     * @returns {Number}\n     */\n\n    function getEmSize(element) {\n      if (!element) {\n        element = document.documentElement;\n      }\n\n      var fontSize = window.getComputedStyle(element, null).fontSize;\n      return parseFloat(fontSize) || 16;\n    }\n    /**\n     * Get element size\n     * @param {HTMLElement} element\n     * @returns {Object} {width, height}\n     */\n\n\n    function getElementSize(element) {\n      if (!element.getBoundingClientRect) {\n        return {\n          width: element.offsetWidth,\n          height: element.offsetHeight\n        };\n      }\n\n      var rect = element.getBoundingClientRect();\n      return {\n        width: Math.round(rect.width),\n        height: Math.round(rect.height)\n      };\n    }\n    /**\n     *\n     * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\n     *\n     * @param {HTMLElement} element\n     * @param {*} value\n     * @returns {*}\n     */\n\n\n    function convertToPx(element, value) {\n      var numbers = value.split(/\\d/);\n      var units = numbers[numbers.length - 1];\n      value = parseFloat(value);\n\n      switch (units) {\n        case \"px\":\n          return value;\n\n        case \"em\":\n          return value * getEmSize(element);\n\n        case \"rem\":\n          return value * getEmSize();\n        // Viewport units!\n        // According to http://quirksmode.org/mobile/tableViewport.html\n        // documentElement.clientWidth/Height gets us the most reliable info\n\n        case \"vw\":\n          return value * document.documentElement.clientWidth / 100;\n\n        case \"vh\":\n          return value * document.documentElement.clientHeight / 100;\n\n        case \"vmin\":\n        case \"vmax\":\n          var vw = document.documentElement.clientWidth / 100;\n          var vh = document.documentElement.clientHeight / 100;\n          var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\n          return value * chooser(vw, vh);\n\n        default:\n          return value;\n        // for now, not supporting physical units (since they are just a set number of px)\n        // or ex/ch (getting accurate measurements is hard)\n      }\n    }\n    /**\n     *\n     * @param {HTMLElement} element\n     * @param {String} id\n     * @constructor\n     */\n\n\n    function SetupInformation(element, id) {\n      this.element = element;\n      var key, option, elementSize, value, actualValue, attrValues, attrValue, attrName;\n      var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\n      /**\n       * Extracts the computed width/height and sets to min/max- attribute.\n       */\n\n      this.call = function () {\n        // extract current dimensions\n        elementSize = getElementSize(this.element);\n        attrValues = {};\n\n        for (key in allQueries[id]) {\n          if (!allQueries[id].hasOwnProperty(key)) {\n            continue;\n          }\n\n          option = allQueries[id][key];\n          value = convertToPx(this.element, option.value);\n          actualValue = option.property === 'width' ? elementSize.width : elementSize.height;\n          attrName = option.mode + '-' + option.property;\n          attrValue = '';\n\n          if (option.mode === 'min' && actualValue >= value) {\n            attrValue += option.value;\n          }\n\n          if (option.mode === 'max' && actualValue <= value) {\n            attrValue += option.value;\n          }\n\n          if (!attrValues[attrName]) attrValues[attrName] = '';\n\n          if (attrValue && -1 === (' ' + attrValues[attrName] + ' ').indexOf(' ' + attrValue + ' ')) {\n            attrValues[attrName] += ' ' + attrValue;\n          }\n        }\n\n        for (var k in attributes) {\n          if (!attributes.hasOwnProperty(k)) continue;\n\n          if (attrValues[attributes[k]]) {\n            this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\n          } else {\n            this.element.removeAttribute(attributes[k]);\n          }\n        }\n      };\n    }\n    /**\n     * @param {HTMLElement} element\n     * @param {Object}      id\n     */\n\n\n    function setupElement(element, id) {\n      if (!element.elementQueriesSetupInformation) {\n        element.elementQueriesSetupInformation = new SetupInformation(element, id);\n      }\n\n      if (!element.elementQueriesSensor) {\n        element.elementQueriesSensor = new ResizeSensor(element, function () {\n          element.elementQueriesSetupInformation.call();\n        });\n      }\n\n      element.elementQueriesSetupInformation.call();\n    }\n    /**\n     * Stores rules to the selector that should be applied once resized.\n     *\n     * @param {String} selector\n     * @param {String} mode min|max\n     * @param {String} property width|height\n     * @param {String} value\n     */\n\n\n    function queueQuery(selector, mode, property, value) {\n      if (typeof allQueries[selector] === 'undefined') {\n        allQueries[selector] = []; // add animation to trigger animationstart event, so we know exactly when a element appears in the DOM\n\n        var id = idToSelectorMapping.length;\n        cssStyleElement.innerHTML += '\\n' + selector + ' {animation: 0.1s element-queries;}';\n        cssStyleElement.innerHTML += '\\n' + selector + ' > .resize-sensor {min-width: ' + id + 'px;}';\n        idToSelectorMapping.push(selector);\n      }\n\n      allQueries[selector].push({\n        mode: mode,\n        property: property,\n        value: value\n      });\n    }\n\n    function getQuery(container) {\n      var query;\n      if (document.querySelectorAll) query = container ? container.querySelectorAll.bind(container) : document.querySelectorAll.bind(document);\n      if (!query && 'undefined' !== typeof $$) query = $$;\n      if (!query && 'undefined' !== typeof jQuery) query = jQuery;\n\n      if (!query) {\n        throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\n      }\n\n      return query;\n    }\n    /**\n     * If animationStart didn't catch a new element in the DOM, we can manually search for it\n     */\n\n\n    function findElementQueriesElements(container) {\n      var query = getQuery(container);\n\n      for (var selector in allQueries) {\n        if (allQueries.hasOwnProperty(selector)) {\n          // find all elements based on the extract query selector from the element query rule\n          var elements = query(selector, container);\n\n          for (var i = 0, j = elements.length; i < j; i++) {\n            setupElement(elements[i], selector);\n          }\n        }\n      }\n    }\n    /**\n     *\n     * @param {HTMLElement} element\n     */\n\n\n    function attachResponsiveImage(element) {\n      var children = [];\n      var rules = [];\n      var sources = [];\n      var defaultImageId = 0;\n      var lastActiveImage = -1;\n      var loadedImages = [];\n\n      for (var i in element.children) {\n        if (!element.children.hasOwnProperty(i)) continue;\n\n        if (element.children[i].tagName && element.children[i].tagName.toLowerCase() === 'img') {\n          children.push(element.children[i]);\n          var minWidth = element.children[i].getAttribute('min-width') || element.children[i].getAttribute('data-min-width'); //var minHeight = element.children[i].getAttribute('min-height') || element.children[i].getAttribute('data-min-height');\n\n          var src = element.children[i].getAttribute('data-src') || element.children[i].getAttribute('url');\n          sources.push(src);\n          var rule = {\n            minWidth: minWidth\n          };\n          rules.push(rule);\n\n          if (!minWidth) {\n            defaultImageId = children.length - 1;\n            element.children[i].style.display = 'block';\n          } else {\n            element.children[i].style.display = 'none';\n          }\n        }\n      }\n\n      lastActiveImage = defaultImageId;\n\n      function check() {\n        var imageToDisplay = false,\n            i;\n\n        for (i in children) {\n          if (!children.hasOwnProperty(i)) continue;\n\n          if (rules[i].minWidth) {\n            if (element.offsetWidth > rules[i].minWidth) {\n              imageToDisplay = i;\n            }\n          }\n        }\n\n        if (!imageToDisplay) {\n          //no rule matched, show default\n          imageToDisplay = defaultImageId;\n        }\n\n        if (lastActiveImage !== imageToDisplay) {\n          //image change\n          if (!loadedImages[imageToDisplay]) {\n            //image has not been loaded yet, we need to load the image first in memory to prevent flash of\n            //no content\n            var image = new Image();\n\n            image.onload = function () {\n              children[imageToDisplay].src = sources[imageToDisplay];\n              children[lastActiveImage].style.display = 'none';\n              children[imageToDisplay].style.display = 'block';\n              loadedImages[imageToDisplay] = true;\n              lastActiveImage = imageToDisplay;\n            };\n\n            image.src = sources[imageToDisplay];\n          } else {\n            children[lastActiveImage].style.display = 'none';\n            children[imageToDisplay].style.display = 'block';\n            lastActiveImage = imageToDisplay;\n          }\n        } else {\n          //make sure for initial check call the .src is set correctly\n          children[imageToDisplay].src = sources[imageToDisplay];\n        }\n      }\n\n      element.resizeSensorInstance = new ResizeSensor(element, check);\n      check();\n    }\n\n    function findResponsiveImages() {\n      var query = getQuery();\n      var elements = query('[data-responsive-image],[responsive-image]');\n\n      for (var i = 0, j = elements.length; i < j; i++) {\n        attachResponsiveImage(elements[i]);\n      }\n    }\n\n    var regex = /,?[\\s\\t]*([^,\\n]*?)((?:\\[[\\s\\t]*?(?:min|max)-(?:width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"[^\"]*?\"[\\s\\t]*?])+)([^,\\n\\s\\{]*)/mgi;\n    var attrRegex = /\\[[\\s\\t]*?(min|max)-(width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"([^\"]*?)\"[\\s\\t]*?]/mgi;\n    /**\n     * @param {String} css\n     */\n\n    function extractQuery(css) {\n      var match, smatch, attrs, attrMatch;\n      css = css.replace(/'/g, '\"');\n\n      while (null !== (match = regex.exec(css))) {\n        smatch = match[1] + match[3];\n        attrs = match[2];\n\n        while (null !== (attrMatch = attrRegex.exec(attrs))) {\n          queueQuery(smatch, attrMatch[1], attrMatch[2], attrMatch[3]);\n        }\n      }\n    }\n    /**\n     * @param {CssRule[]|String} rules\n     */\n\n\n    function readRules(rules) {\n      var selector = '';\n\n      if (!rules) {\n        return;\n      }\n\n      if ('string' === typeof rules) {\n        rules = rules.toLowerCase();\n\n        if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\n          extractQuery(rules);\n        }\n      } else {\n        for (var i = 0, j = rules.length; i < j; i++) {\n          if (1 === rules[i].type) {\n            selector = rules[i].selectorText || rules[i].cssText;\n\n            if (-1 !== selector.indexOf('min-height') || -1 !== selector.indexOf('max-height')) {\n              extractQuery(selector);\n            } else if (-1 !== selector.indexOf('min-width') || -1 !== selector.indexOf('max-width')) {\n              extractQuery(selector);\n            }\n          } else if (4 === rules[i].type) {\n            readRules(rules[i].cssRules || rules[i].rules);\n          } else if (3 === rules[i].type) {\n            if (rules[i].styleSheet.hasOwnProperty(\"cssRules\")) {\n              readRules(rules[i].styleSheet.cssRules);\n            }\n          }\n        }\n      }\n    }\n\n    var defaultCssInjected = false;\n    /**\n     * Searches all css rules and setups the event listener to all elements with element query rules..\n     */\n\n    this.init = function () {\n      var animationStart = 'animationstart';\n\n      if (typeof document.documentElement.style['webkitAnimationName'] !== 'undefined') {\n        animationStart = 'webkitAnimationStart';\n      } else if (typeof document.documentElement.style['MozAnimationName'] !== 'undefined') {\n        animationStart = 'mozanimationstart';\n      } else if (typeof document.documentElement.style['OAnimationName'] !== 'undefined') {\n        animationStart = 'oanimationstart';\n      }\n\n      document.body.addEventListener(animationStart, function (e) {\n        var element = e.target;\n        var styles = element && window.getComputedStyle(element, null);\n        var animationName = styles && styles.getPropertyValue('animation-name');\n        var requiresSetup = animationName && -1 !== animationName.indexOf('element-queries');\n\n        if (requiresSetup) {\n          element.elementQueriesSensor = new ResizeSensor(element, function () {\n            if (element.elementQueriesSetupInformation) {\n              element.elementQueriesSetupInformation.call();\n            }\n          });\n          var sensorStyles = window.getComputedStyle(element.resizeSensor, null);\n          var id = sensorStyles.getPropertyValue('min-width');\n          id = parseInt(id.replace('px', ''));\n          setupElement(e.target, idToSelectorMapping[id]);\n        }\n      });\n\n      if (!defaultCssInjected) {\n        cssStyleElement = document.createElement('style');\n        cssStyleElement.type = 'text/css';\n        cssStyleElement.innerHTML = '[responsive-image] > img, [data-responsive-image] {overflow: hidden; padding: 0; } [responsive-image] > img, [data-responsive-image] > img {width: 100%;}'; //safari wants at least one rule in keyframes to start working\n\n        cssStyleElement.innerHTML += '\\n@keyframes element-queries { 0% { visibility: inherit; } }';\n        document.getElementsByTagName('head')[0].appendChild(cssStyleElement);\n        defaultCssInjected = true;\n      }\n\n      for (var i = 0, j = document.styleSheets.length; i < j; i++) {\n        try {\n          if (document.styleSheets[i].href && 0 === document.styleSheets[i].href.indexOf('file://')) {\n            console.log(\"CssElementQueries: unable to parse local css files, \" + document.styleSheets[i].href);\n          }\n\n          readRules(document.styleSheets[i].cssRules || document.styleSheets[i].rules || document.styleSheets[i].cssText);\n        } catch (e) {}\n      }\n\n      findResponsiveImages();\n    };\n    /**\n     * Go through all collected rules (readRules()) and attach the resize-listener.\n     * Not necessary to call it manually, since we detect automatically when new elements\n     * are available in the DOM. However, sometimes handy for dirty DOM modifications.\n     *\n     * @param {HTMLElement} container only elements of the container are considered (document.body if not set)\n     */\n\n\n    this.findElementQueriesElements = function (container) {\n      findElementQueriesElements(container);\n    };\n\n    this.update = function () {\n      this.init();\n    };\n  };\n\n  ElementQueries.update = function () {\n    ElementQueries.instance.update();\n  };\n  /**\n   * Removes all sensor and elementquery information from the element.\n   *\n   * @param {HTMLElement} element\n   */\n\n\n  ElementQueries.detach = function (element) {\n    if (element.elementQueriesSetupInformation) {\n      //element queries\n      element.elementQueriesSensor.detach();\n      delete element.elementQueriesSetupInformation;\n      delete element.elementQueriesSensor;\n    } else if (element.resizeSensorInstance) {\n      //responsive image\n      element.resizeSensorInstance.detach();\n      delete element.resizeSensorInstance;\n    }\n  };\n\n  ElementQueries.init = function () {\n    if (!ElementQueries.instance) {\n      ElementQueries.instance = new ElementQueries();\n    }\n\n    ElementQueries.instance.init();\n  };\n\n  var domLoaded = function domLoaded(callback) {\n    /* Mozilla, Chrome, Opera */\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', callback, false);\n    }\n    /* Safari, iCab, Konqueror */\n    else if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\n        var DOMLoadTimer = setInterval(function () {\n          if (/loaded|complete/i.test(document.readyState)) {\n            callback();\n            clearInterval(DOMLoadTimer);\n          }\n        }, 10);\n      }\n      /* Other web browsers */\n      else window.onload = callback;\n  };\n\n  ElementQueries.findElementQueriesElements = function (container) {\n    ElementQueries.instance.findElementQueriesElements(container);\n  };\n\n  ElementQueries.listen = function () {\n    domLoaded(ElementQueries.init);\n  };\n\n  return ElementQueries;\n});\n\n//# sourceURL=webpack:///./node_modules/css-element-queries/src/ElementQueries.js?");

/***/ }),

/***/ "./node_modules/css-element-queries/src/ResizeSensor.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-element-queries/src/ResizeSensor.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;\n/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof window !== 'undefined' ? window : this, function () {\n  // Make sure it does not throw in a SSR (Server Side Rendering) situation\n  if (typeof window === \"undefined\") {\n    return null;\n  } // Only used for the dirty checking, so the event callback count is limited to max 1 call per fps per sensor.\n  // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and\n  // would generate too many unnecessary events.\n\n\n  var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function (fn) {\n    return window.setTimeout(fn, 20);\n  };\n  /**\n   * Iterate over each of the provided element(s).\n   *\n   * @param {HTMLElement|HTMLElement[]} elements\n   * @param {Function}                  callback\n   */\n\n\n  function forEachElement(elements, callback) {\n    var elementsType = Object.prototype.toString.call(elements);\n    var isCollectionTyped = '[object Array]' === elementsType || '[object NodeList]' === elementsType || '[object HTMLCollection]' === elementsType || '[object Object]' === elementsType || 'undefined' !== typeof jQuery && elements instanceof jQuery //jquery\n    || 'undefined' !== typeof Elements && elements instanceof Elements //mootools\n    ;\n    var i = 0,\n        j = elements.length;\n\n    if (isCollectionTyped) {\n      for (; i < j; i++) {\n        callback(elements[i]);\n      }\n    } else {\n      callback(elements);\n    }\n  }\n  /**\n  * Get element size\n  * @param {HTMLElement} element\n  * @returns {Object} {width, height}\n  */\n\n\n  function getElementSize(element) {\n    if (!element.getBoundingClientRect) {\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight\n      };\n    }\n\n    var rect = element.getBoundingClientRect();\n    return {\n      width: Math.round(rect.width),\n      height: Math.round(rect.height)\n    };\n  }\n  /**\n   * Class for dimension change detection.\n   *\n   * @param {Element|Element[]|Elements|jQuery} element\n   * @param {Function} callback\n   *\n   * @constructor\n   */\n\n\n  var ResizeSensor = function ResizeSensor(element, callback) {\n    /**\n     *\n     * @constructor\n     */\n    function EventQueue() {\n      var q = [];\n\n      this.add = function (ev) {\n        q.push(ev);\n      };\n\n      var i, j;\n\n      this.call = function (sizeInfo) {\n        for (i = 0, j = q.length; i < j; i++) {\n          q[i].call(this, sizeInfo);\n        }\n      };\n\n      this.remove = function (ev) {\n        var newQueue = [];\n\n        for (i = 0, j = q.length; i < j; i++) {\n          if (q[i] !== ev) newQueue.push(q[i]);\n        }\n\n        q = newQueue;\n      };\n\n      this.length = function () {\n        return q.length;\n      };\n    }\n    /**\n     *\n     * @param {HTMLElement} element\n     * @param {Function}    resized\n     */\n\n\n    function attachResizeEvent(element, resized) {\n      if (!element) return;\n\n      if (element.resizedAttached) {\n        element.resizedAttached.add(resized);\n        return;\n      }\n\n      element.resizedAttached = new EventQueue();\n      element.resizedAttached.add(resized);\n      element.resizeSensor = document.createElement('div');\n      element.resizeSensor.dir = 'ltr';\n      element.resizeSensor.className = 'resize-sensor';\n      var style = 'pointer-events: none; position: absolute; left: 0px; top: 0px; right: 0; bottom: 0; ' + 'overflow: hidden; z-index: -1; visibility: hidden; max-width: 100%;';\n      var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n      element.resizeSensor.style.cssText = style;\n      element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + '</div>' + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + '</div>';\n      element.appendChild(element.resizeSensor);\n      var computedStyle = window.getComputedStyle(element);\n      var position = computedStyle ? computedStyle.getPropertyValue('position') : null;\n\n      if ('absolute' !== position && 'relative' !== position && 'fixed' !== position) {\n        element.style.position = 'relative';\n      }\n\n      var expand = element.resizeSensor.childNodes[0];\n      var expandChild = expand.childNodes[0];\n      var shrink = element.resizeSensor.childNodes[1];\n      var dirty, rafId;\n      var size = getElementSize(element);\n      var lastWidth = size.width;\n      var lastHeight = size.height;\n      var initialHiddenCheck = true;\n      var lastAnimationFrame = 0;\n\n      var resetExpandShrink = function resetExpandShrink() {\n        var width = element.offsetWidth;\n        var height = element.offsetHeight;\n        expandChild.style.width = width + 10 + 'px';\n        expandChild.style.height = height + 10 + 'px';\n        expand.scrollLeft = width + 10;\n        expand.scrollTop = height + 10;\n        shrink.scrollLeft = width + 10;\n        shrink.scrollTop = height + 10;\n      };\n\n      var reset = function reset() {\n        // Check if element is hidden\n        if (initialHiddenCheck) {\n          var invisible = element.offsetWidth === 0 && element.offsetHeight === 0;\n\n          if (invisible) {\n            // Check in next frame\n            if (!lastAnimationFrame) {\n              lastAnimationFrame = requestAnimationFrame(function () {\n                lastAnimationFrame = 0;\n                reset();\n              });\n            }\n\n            return;\n          } else {\n            // Stop checking\n            initialHiddenCheck = false;\n          }\n        }\n\n        resetExpandShrink();\n      };\n\n      element.resizeSensor.resetSensor = reset;\n\n      var onResized = function onResized() {\n        rafId = 0;\n        if (!dirty) return;\n        lastWidth = size.width;\n        lastHeight = size.height;\n\n        if (element.resizedAttached) {\n          element.resizedAttached.call(size);\n        }\n      };\n\n      var onScroll = function onScroll() {\n        size = getElementSize(element);\n        dirty = size.width !== lastWidth || size.height !== lastHeight;\n\n        if (dirty && !rafId) {\n          rafId = requestAnimationFrame(onResized);\n        }\n\n        reset();\n      };\n\n      var addEvent = function addEvent(el, name, cb) {\n        if (el.attachEvent) {\n          el.attachEvent('on' + name, cb);\n        } else {\n          el.addEventListener(name, cb);\n        }\n      };\n\n      addEvent(expand, 'scroll', onScroll);\n      addEvent(shrink, 'scroll', onScroll); // Fix for custom Elements\n\n      requestAnimationFrame(reset);\n    }\n\n    forEachElement(element, function (elem) {\n      attachResizeEvent(elem, callback);\n    });\n\n    this.detach = function (ev) {\n      ResizeSensor.detach(element, ev);\n    };\n\n    this.reset = function () {\n      element.resizeSensor.resetSensor();\n    };\n  };\n\n  ResizeSensor.reset = function (element) {\n    forEachElement(element, function (elem) {\n      elem.resizeSensor.resetSensor();\n    });\n  };\n\n  ResizeSensor.detach = function (element, ev) {\n    forEachElement(element, function (elem) {\n      if (!elem) return;\n\n      if (elem.resizedAttached && typeof ev === \"function\") {\n        elem.resizedAttached.remove(ev);\n        if (elem.resizedAttached.length()) return;\n      }\n\n      if (elem.resizeSensor) {\n        if (elem.contains(elem.resizeSensor)) {\n          elem.removeChild(elem.resizeSensor);\n        }\n\n        delete elem.resizeSensor;\n        delete elem.resizedAttached;\n      }\n    });\n  };\n\n  if (typeof MutationObserver !== \"undefined\") {\n    var observer = new MutationObserver(function (mutations) {\n      for (var i in mutations) {\n        if (mutations.hasOwnProperty(i)) {\n          var items = mutations[i].addedNodes;\n\n          for (var j = 0; j < items.length; j++) {\n            if (items[j].resizeSensor) {\n              ResizeSensor.reset(items[j]);\n            }\n          }\n        }\n      }\n    });\n    document.addEventListener(\"DOMContentLoaded\", function (event) {\n      observer.observe(document.body, {\n        childList: true,\n        subtree: true\n      });\n    });\n  }\n\n  return ResizeSensor;\n});\n\n//# sourceURL=webpack:///./node_modules/css-element-queries/src/ResizeSensor.js?");

/***/ }),

/***/ "./node_modules/sticky-sidebar/src/sticky-sidebar.js":
/*!***********************************************************!*\
  !*** ./node_modules/sticky-sidebar/src/sticky-sidebar.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n * Sticky Sidebar JavaScript Plugin.\r\n * @version 3.3.1\r\n * @author Ahmed Bouhuolia <a.bouhuolia@gmail.com>\r\n * @license The MIT License (MIT)\r\n */\nvar StickySidebar = function () {\n  // ---------------------------------\n  // # Define Constants\n  // ---------------------------------\n  //\n  var EVENT_KEY = '.stickySidebar';\n  var VERSION = '3.3.1';\n  var DEFAULTS = {\n    /**\r\n     * Additional top spacing of the element when it becomes sticky.\r\n     * @type {Numeric|Function}\r\n     */\n    topSpacing: 0,\n\n    /**\r\n     * Additional bottom spacing of the element when it becomes sticky.\r\n     * @type {Numeric|Function}\r\n     */\n    bottomSpacing: 0,\n\n    /**\r\n     * Container sidebar selector to know what the beginning and end of sticky element.\r\n     * @type {String|False}\r\n     */\n    containerSelector: false,\n\n    /**\r\n     * Inner wrapper selector.\r\n     * @type {String}\r\n     */\n    innerWrapperSelector: '.inner-wrapper-sticky',\n\n    /**\r\n     * The name of CSS class to apply to elements when they have become stuck.\r\n     * @type {String|False}\r\n     */\n    stickyClass: 'is-affixed',\n\n    /**\r\n     * Detect when sidebar and its container change height so re-calculate their dimensions.\r\n     * @type {Boolean}\r\n     */\n    resizeSensor: true,\n\n    /**\r\n     * The sidebar returns to its normal position if its width below this value.\r\n     * @type {Numeric}\r\n     */\n    minWidth: false\n  }; // ---------------------------------\n  // # Class Definition\n  // ---------------------------------\n  //\n\n  /**\r\n   * Sticky Sidebar Class.\r\n   * @public\r\n   */\n\n  var StickySidebar =\n  /*#__PURE__*/\n  function () {\n    /**\r\n     * Sticky Sidebar Constructor.\r\n     * @constructor\r\n     * @param {HTMLElement|String} sidebar - The sidebar element or sidebar selector.\r\n     * @param {Object} options - The options of sticky sidebar.\r\n     */\n    function StickySidebar(sidebar) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, StickySidebar);\n\n      this.options = StickySidebar.extend(DEFAULTS, options); // Sidebar element query if there's no one, throw error.\n\n      this.sidebar = 'string' === typeof sidebar ? document.querySelector(sidebar) : sidebar;\n      if ('undefined' === typeof this.sidebar) throw new Error(\"There is no specific sidebar element.\");\n      this.sidebarInner = false;\n      this.container = this.sidebar.parentElement; // Current Affix Type of sidebar element.\n\n      this.affixedType = 'STATIC';\n      this.direction = 'down';\n      this.support = {\n        transform: false,\n        transform3d: false\n      };\n      this._initialized = false;\n      this._reStyle = false;\n      this._breakpoint = false;\n      this._resizeListeners = []; // Dimensions of sidebar, container and screen viewport.\n\n      this.dimensions = {\n        translateY: 0,\n        topSpacing: 0,\n        lastTopSpacing: 0,\n        bottomSpacing: 0,\n        lastBottomSpacing: 0,\n        sidebarHeight: 0,\n        sidebarWidth: 0,\n        containerTop: 0,\n        containerHeight: 0,\n        viewportHeight: 0,\n        viewportTop: 0,\n        lastViewportTop: 0\n      }; // Bind event handlers for referencability.\n\n      ['handleEvent'].forEach(function (method) {\n        _this[method] = _this[method].bind(_this);\n      }); // Initialize sticky sidebar for first time.\n\n      this.initialize();\n    }\n    /**\r\n     * Initializes the sticky sidebar by adding inner wrapper, define its container, \r\n     * min-width breakpoint, calculating dimensions, adding helper classes and inline style.\r\n     * @private\r\n     */\n\n\n    _createClass(StickySidebar, [{\n      key: \"initialize\",\n      value: function initialize() {\n        var _this2 = this;\n\n        this._setSupportFeatures(); // Get sticky sidebar inner wrapper, if not found, will create one.\n\n\n        if (this.options.innerWrapperSelector) {\n          this.sidebarInner = this.sidebar.querySelector(this.options.innerWrapperSelector);\n          if (null === this.sidebarInner) this.sidebarInner = false;\n        }\n\n        if (!this.sidebarInner) {\n          var wrapper = document.createElement('div');\n          wrapper.setAttribute('class', 'inner-wrapper-sticky');\n          this.sidebar.appendChild(wrapper);\n\n          while (this.sidebar.firstChild != wrapper) {\n            wrapper.appendChild(this.sidebar.firstChild);\n          }\n\n          this.sidebarInner = this.sidebar.querySelector('.inner-wrapper-sticky');\n        } // Container wrapper of the sidebar.\n\n\n        if (this.options.containerSelector) {\n          var containers = document.querySelectorAll(this.options.containerSelector);\n          containers = Array.prototype.slice.call(containers);\n          containers.forEach(function (container, item) {\n            if (!container.contains(_this2.sidebar)) return;\n            _this2.container = container;\n          });\n          if (!containers.length) throw new Error(\"The container does not contains on the sidebar.\");\n        } // If top/bottom spacing is not function parse value to integer.\n\n\n        if ('function' !== typeof this.options.topSpacing) this.options.topSpacing = parseInt(this.options.topSpacing) || 0;\n        if ('function' !== typeof this.options.bottomSpacing) this.options.bottomSpacing = parseInt(this.options.bottomSpacing) || 0; // Breakdown sticky sidebar if screen width below `options.minWidth`.\n\n        this._widthBreakpoint(); // Calculate dimensions of sidebar, container and viewport.\n\n\n        this.calcDimensions(); // Affix sidebar in proper position.\n\n        this.stickyPosition(); // Bind all events.\n\n        this.bindEvents(); // Inform other properties the sticky sidebar is initialized.\n\n        this._initialized = true;\n      }\n      /**\r\n       * Bind all events of sticky sidebar plugin.\r\n       * @protected\r\n       */\n\n    }, {\n      key: \"bindEvents\",\n      value: function bindEvents() {\n        window.addEventListener('resize', this, {\n          passive: true,\n          capture: false\n        });\n        window.addEventListener('scroll', this, {\n          passive: true,\n          capture: false\n        });\n        this.sidebar.addEventListener('update' + EVENT_KEY, this);\n\n        if (this.options.resizeSensor && 'undefined' !== typeof ResizeSensor) {\n          new ResizeSensor(this.sidebarInner, this.handleEvent);\n          new ResizeSensor(this.container, this.handleEvent);\n        }\n      }\n      /**\r\n       * Handles all events of the plugin.\r\n       * @param {Object} event - Event object passed from listener.\r\n       */\n\n    }, {\n      key: \"handleEvent\",\n      value: function handleEvent(event) {\n        this.updateSticky(event);\n      }\n      /**\r\n       * Calculates dimensions of sidebar, container and screen viewpoint\r\n       * @public\r\n       */\n\n    }, {\n      key: \"calcDimensions\",\n      value: function calcDimensions() {\n        if (this._breakpoint) return;\n        var dims = this.dimensions; // Container of sticky sidebar dimensions.\n\n        dims.containerTop = StickySidebar.offsetRelative(this.container).top;\n        dims.containerHeight = this.container.clientHeight;\n        dims.containerBottom = dims.containerTop + dims.containerHeight; // Sidebar dimensions.\n\n        dims.sidebarHeight = this.sidebarInner.offsetHeight;\n        dims.sidebarWidth = this.sidebar.offsetWidth; // Screen viewport dimensions.\n\n        dims.viewportHeight = window.innerHeight;\n\n        this._calcDimensionsWithScroll();\n      }\n      /**\r\n       * Some dimensions values need to be up-to-date when scrolling the page.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_calcDimensionsWithScroll\",\n      value: function _calcDimensionsWithScroll() {\n        var dims = this.dimensions;\n        dims.sidebarLeft = StickySidebar.offsetRelative(this.sidebar).left;\n        dims.viewportTop = document.documentElement.scrollTop || document.body.scrollTop;\n        dims.viewportBottom = dims.viewportTop + dims.viewportHeight;\n        dims.viewportLeft = document.documentElement.scrollLeft || document.body.scrollLeft;\n        dims.topSpacing = this.options.topSpacing;\n        dims.bottomSpacing = this.options.bottomSpacing;\n        if ('function' === typeof dims.topSpacing) dims.topSpacing = parseInt(dims.topSpacing(this.sidebar)) || 0;\n        if ('function' === typeof dims.bottomSpacing) dims.bottomSpacing = parseInt(dims.bottomSpacing(this.sidebar)) || 0;\n\n        if ('VIEWPORT-TOP' === this.affixedType) {\n          // Adjust translate Y in the case decrease top spacing value.\n          if (dims.topSpacing < dims.lastTopSpacing) {\n            dims.translateY += dims.lastTopSpacing - dims.topSpacing;\n            this._reStyle = true;\n          }\n        } else if ('VIEWPORT-BOTTOM' === this.affixedType) {\n          // Adjust translate Y in the case decrease bottom spacing value.\n          if (dims.bottomSpacing < dims.lastBottomSpacing) {\n            dims.translateY += dims.lastBottomSpacing - dims.bottomSpacing;\n            this._reStyle = true;\n          }\n        }\n\n        dims.lastTopSpacing = dims.topSpacing;\n        dims.lastBottomSpacing = dims.bottomSpacing;\n      }\n      /**\r\n       * Determine whether the sidebar is bigger than viewport.\r\n       * @public\r\n       * @return {Boolean}\r\n       */\n\n    }, {\n      key: \"isSidebarFitsViewport\",\n      value: function isSidebarFitsViewport() {\n        return this.dimensions.sidebarHeight < this.dimensions.viewportHeight;\n      }\n      /**\r\n       * Observe browser scrolling direction top and down.\r\n       */\n\n    }, {\n      key: \"observeScrollDir\",\n      value: function observeScrollDir() {\n        var dims = this.dimensions;\n        if (dims.lastViewportTop === dims.viewportTop) return;\n        var furthest = 'down' === this.direction ? Math.min : Math.max; // If the browser is scrolling not in the same direction.\n\n        if (dims.viewportTop === furthest(dims.viewportTop, dims.lastViewportTop)) this.direction = 'down' === this.direction ? 'up' : 'down';\n      }\n      /**\r\n       * Gets affix type of sidebar according to current scrollTop and scrollLeft.\r\n       * Holds all logical affix of the sidebar when scrolling up and down and when sidebar \r\n       * is bigger than viewport and vice versa.\r\n       * @public\r\n       * @return {String|False} - Proper affix type.\r\n       */\n\n    }, {\n      key: \"getAffixType\",\n      value: function getAffixType() {\n        var dims = this.dimensions,\n            affixType = false;\n\n        this._calcDimensionsWithScroll();\n\n        var sidebarBottom = dims.sidebarHeight + dims.containerTop;\n        var colliderTop = dims.viewportTop + dims.topSpacing;\n        var colliderBottom = dims.viewportBottom - dims.bottomSpacing; // When browser is scrolling top.\n\n        if ('up' === this.direction) {\n          if (colliderTop <= dims.containerTop) {\n            dims.translateY = 0;\n            affixType = 'STATIC';\n          } else if (colliderTop <= dims.translateY + dims.containerTop) {\n            dims.translateY = colliderTop - dims.containerTop;\n            affixType = 'VIEWPORT-TOP';\n          } else if (!this.isSidebarFitsViewport() && dims.containerTop <= colliderTop) {\n            affixType = 'VIEWPORT-UNBOTTOM';\n          } // When browser is scrolling up.\n\n        } else {\n          // When sidebar element is not bigger than screen viewport.\n          if (this.isSidebarFitsViewport()) {\n            if (dims.sidebarHeight + colliderTop >= dims.containerBottom) {\n              dims.translateY = dims.containerBottom - sidebarBottom;\n              affixType = 'CONTAINER-BOTTOM';\n            } else if (colliderTop >= dims.containerTop) {\n              dims.translateY = colliderTop - dims.containerTop;\n              affixType = 'VIEWPORT-TOP';\n            } // When sidebar element is bigger than screen viewport.\n\n          } else {\n            if (dims.containerBottom <= colliderBottom) {\n              dims.translateY = dims.containerBottom - sidebarBottom;\n              affixType = 'CONTAINER-BOTTOM';\n            } else if (sidebarBottom + dims.translateY <= colliderBottom) {\n              dims.translateY = colliderBottom - sidebarBottom;\n              affixType = 'VIEWPORT-BOTTOM';\n            } else if (dims.containerTop + dims.translateY <= colliderTop) {\n              affixType = 'VIEWPORT-UNBOTTOM';\n            }\n          }\n        } // Make sure the translate Y is not bigger than container height.\n\n\n        dims.translateY = Math.max(0, dims.translateY);\n        dims.translateY = Math.min(dims.containerHeight, dims.translateY);\n        dims.lastViewportTop = dims.viewportTop;\n        return affixType;\n      }\n      /**\r\n       * Gets inline style of sticky sidebar wrapper and inner wrapper according \r\n       * to its affix type.\r\n       * @private\r\n       * @param {String} affixType - Affix type of sticky sidebar.\r\n       * @return {Object}\r\n       */\n\n    }, {\n      key: \"_getStyle\",\n      value: function _getStyle(affixType) {\n        if ('undefined' === typeof affixType) return;\n        var style = {\n          inner: {},\n          outer: {}\n        };\n        var dims = this.dimensions;\n\n        switch (affixType) {\n          case 'VIEWPORT-TOP':\n            style.inner = {\n              position: 'fixed',\n              top: dims.topSpacing,\n              left: dims.sidebarLeft - dims.viewportLeft,\n              width: dims.sidebarWidth\n            };\n            break;\n\n          case 'VIEWPORT-BOTTOM':\n            style.inner = {\n              position: 'fixed',\n              top: 'auto',\n              left: dims.sidebarLeft,\n              bottom: dims.bottomSpacing,\n              width: dims.sidebarWidth\n            };\n            break;\n\n          case 'CONTAINER-BOTTOM':\n          case 'VIEWPORT-UNBOTTOM':\n            var translate = this._getTranslate(0, dims.translateY + 'px');\n\n            if (translate) style.inner = {\n              transform: translate\n            };else style.inner = {\n              position: 'absolute',\n              top: dims.translateY,\n              width: dims.sidebarWidth\n            };\n            break;\n        }\n\n        switch (affixType) {\n          case 'VIEWPORT-TOP':\n          case 'VIEWPORT-BOTTOM':\n          case 'VIEWPORT-UNBOTTOM':\n          case 'CONTAINER-BOTTOM':\n            style.outer = {\n              height: dims.sidebarHeight,\n              position: 'relative'\n            };\n            break;\n        }\n\n        style.outer = StickySidebar.extend({\n          height: '',\n          position: ''\n        }, style.outer);\n        style.inner = StickySidebar.extend({\n          position: 'relative',\n          top: '',\n          left: '',\n          bottom: '',\n          width: '',\n          transform: this._getTranslate()\n        }, style.inner);\n        return style;\n      }\n      /**\r\n       * Cause the sidebar to be sticky according to affix type by adding inline\r\n       * style, adding helper class and trigger events.\r\n       * @function\r\n       * @protected\r\n       * @param {string} force - Update sticky sidebar position by force.\r\n       */\n\n    }, {\n      key: \"stickyPosition\",\n      value: function stickyPosition(force) {\n        if (this._breakpoint) return;\n        force = this._reStyle || force || false;\n        var offsetTop = this.options.topSpacing;\n        var offsetBottom = this.options.bottomSpacing;\n        var affixType = this.getAffixType();\n\n        var style = this._getStyle(affixType);\n\n        if ((this.affixedType != affixType || force) && affixType) {\n          var affixEvent = 'affix.' + affixType.toLowerCase().replace('viewport-', '') + EVENT_KEY;\n          StickySidebar.eventTrigger(this.sidebar, affixEvent);\n          if ('STATIC' === affixType) StickySidebar.removeClass(this.sidebar, this.options.stickyClass);else StickySidebar.addClass(this.sidebar, this.options.stickyClass);\n\n          for (var key in style.outer) {\n            var _unit = 'number' === typeof style.outer[key] ? 'px' : '';\n\n            this.sidebar.style[key] = style.outer[key];\n          }\n\n          for (var _key in style.inner) {\n            var _unit2 = 'number' === typeof style.inner[_key] ? 'px' : '';\n\n            this.sidebarInner.style[_key] = style.inner[_key] + _unit2;\n          }\n\n          var affixedEvent = 'affixed.' + affixType.toLowerCase().replace('viewport-', '') + EVENT_KEY;\n          StickySidebar.eventTrigger(this.sidebar, affixedEvent);\n        } else {\n          if (this._initialized) this.sidebarInner.style.left = style.inner.left;\n        }\n\n        this.affixedType = affixType;\n      }\n      /**\r\n       * Breakdown sticky sidebar when window width is below `options.minWidth` value.\r\n       * @protected\r\n       */\n\n    }, {\n      key: \"_widthBreakpoint\",\n      value: function _widthBreakpoint() {\n        if (window.innerWidth <= this.options.minWidth) {\n          this._breakpoint = true;\n          this.affixedType = 'STATIC';\n          this.sidebar.removeAttribute('style');\n          StickySidebar.removeClass(this.sidebar, this.options.stickyClass);\n          this.sidebarInner.removeAttribute('style');\n        } else {\n          this._breakpoint = false;\n        }\n      }\n      /**\r\n       * Switches between functions stack for each event type, if there's no \r\n       * event, it will re-initialize sticky sidebar.\r\n       * @public\r\n       */\n\n    }, {\n      key: \"updateSticky\",\n      value: function updateSticky() {\n        var _this3 = this;\n\n        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (this._running) return;\n        this._running = true;\n\n        (function (eventType) {\n          requestAnimationFrame(function () {\n            switch (eventType) {\n              // When browser is scrolling and re-calculate just dimensions\n              // within scroll. \n              case 'scroll':\n                _this3._calcDimensionsWithScroll();\n\n                _this3.observeScrollDir();\n\n                _this3.stickyPosition();\n\n                break;\n              // When browser is resizing or there's no event, observe width\n              // breakpoint and re-calculate dimensions.\n\n              case 'resize':\n              default:\n                _this3._widthBreakpoint();\n\n                _this3.calcDimensions();\n\n                _this3.stickyPosition(true);\n\n                break;\n            }\n\n            _this3._running = false;\n          });\n        })(event.type);\n      }\n      /**\r\n       * Set browser support features to the public property.\r\n       * @private\r\n       */\n\n    }, {\n      key: \"_setSupportFeatures\",\n      value: function _setSupportFeatures() {\n        var support = this.support;\n        support.transform = StickySidebar.supportTransform();\n        support.transform3d = StickySidebar.supportTransform(true);\n      }\n      /**\r\n       * Get translate value, if the browser supports transfrom3d, it will adopt it.\r\n       * and the same with translate. if browser doesn't support both return false.\r\n       * @param {Number} y - Value of Y-axis.\r\n       * @param {Number} x - Value of X-axis.\r\n       * @param {Number} z - Value of Z-axis.\r\n       * @return {String|False}\r\n       */\n\n    }, {\n      key: \"_getTranslate\",\n      value: function _getTranslate() {\n        var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        if (this.support.transform3d) return 'translate3d(' + y + ', ' + x + ', ' + z + ')';else if (this.support.translate) return 'translate(' + y + ', ' + x + ')';else return false;\n      }\n      /**\r\n       * Destroy sticky sidebar plugin.\r\n       * @public\r\n       */\n\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        window.removeEventListener('resize', this, {\n          caption: false\n        });\n        window.removeEventListener('scroll', this, {\n          caption: false\n        });\n        this.sidebar.classList.remove(this.options.stickyClass);\n        this.sidebar.style.minHeight = '';\n        this.sidebar.removeEventListener('update' + EVENT_KEY, this);\n        var styleReset = {\n          inner: {},\n          outer: {}\n        };\n        styleReset.inner = {\n          position: '',\n          top: '',\n          left: '',\n          bottom: '',\n          width: '',\n          transform: ''\n        };\n        styleReset.outer = {\n          height: '',\n          position: ''\n        };\n\n        for (var key in styleReset.outer) {\n          this.sidebar.style[key] = styleReset.outer[key];\n        }\n\n        for (var _key2 in styleReset.inner) {\n          this.sidebarInner.style[_key2] = styleReset.inner[_key2];\n        }\n\n        if (this.options.resizeSensor && 'undefined' !== typeof ResizeSensor) {\n          ResizeSensor.detach(this.sidebarInner, this.handleEvent);\n          ResizeSensor.detach(this.container, this.handleEvent);\n        }\n      }\n      /**\r\n       * Determine if the browser supports CSS transform feature.\r\n       * @function\r\n       * @static\r\n       * @param {Boolean} transform3d - Detect transform with translate3d.\r\n       * @return {String}\r\n       */\n\n    }], [{\n      key: \"supportTransform\",\n      value: function supportTransform(transform3d) {\n        var result = false,\n            property = transform3d ? 'perspective' : 'transform',\n            upper = property.charAt(0).toUpperCase() + property.slice(1),\n            prefixes = ['Webkit', 'Moz', 'O', 'ms'],\n            support = document.createElement('support'),\n            style = support.style;\n        (property + ' ' + prefixes.join(upper + ' ') + upper).split(' ').forEach(function (property, i) {\n          if (style[property] !== undefined) {\n            result = property;\n            return false;\n          }\n        });\n        return result;\n      }\n      /**\r\n       * Trigger custom event.\r\n       * @static\r\n       * @param {DOMObject} element - Target element on the DOM.\r\n       * @param {String} eventName - Event name.\r\n       * @param {Object} data - \r\n       */\n\n    }, {\n      key: \"eventTrigger\",\n      value: function eventTrigger(element, eventName, data) {\n        try {\n          var event = new CustomEvent(eventName, {\n            detail: data\n          });\n        } catch (e) {\n          var event = document.createEvent('CustomEvent');\n          event.initCustomEvent(eventName, true, true, data);\n        }\n\n        element.dispatchEvent(event);\n      }\n      /**\r\n       * Extend options object with defaults.\r\n       * @function\r\n       * @static\r\n       */\n\n    }, {\n      key: \"extend\",\n      value: function extend(defaults, options) {\n        var results = {};\n\n        for (var key in defaults) {\n          if ('undefined' !== typeof options[key]) results[key] = options[key];else results[key] = defaults[key];\n        }\n\n        return results;\n      }\n      /**\r\n       * Get current coordinates left and top of specific element.\r\n       * @static\r\n       */\n\n    }, {\n      key: \"offsetRelative\",\n      value: function offsetRelative(element) {\n        var result = {\n          left: 0,\n          top: 0\n        };\n\n        do {\n          var offsetTop = element.offsetTop;\n          var offsetLeft = element.offsetLeft;\n          if (!isNaN(offsetTop)) result.top += offsetTop;\n          if (!isNaN(offsetLeft)) result.left += offsetLeft;\n          element = 'BODY' === element.tagName ? element.parentElement : element.offsetParent;\n        } while (element);\n\n        return result;\n      }\n      /**\r\n       * Add specific class name to specific element.\r\n       * @static \r\n       * @param {ObjectDOM} element \r\n       * @param {String} className \r\n       */\n\n    }, {\n      key: \"addClass\",\n      value: function addClass(element, className) {\n        if (!StickySidebar.hasClass(element, className)) {\n          if (element.classList) element.classList.add(className);else element.className += ' ' + className;\n        }\n      }\n      /**\r\n       * Remove specific class name to specific element\r\n       * @static\r\n       * @param {ObjectDOM} element \r\n       * @param {String} className \r\n       */\n\n    }, {\n      key: \"removeClass\",\n      value: function removeClass(element, className) {\n        if (StickySidebar.hasClass(element, className)) {\n          if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n        }\n      }\n      /**\r\n       * Determine weather the element has specific class name.\r\n       * @static\r\n       * @param {ObjectDOM} element \r\n       * @param {String} className \r\n       */\n\n    }, {\n      key: \"hasClass\",\n      value: function hasClass(element, className) {\n        if (element.classList) return element.classList.contains(className);else return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\n      }\n    }]);\n\n    return StickySidebar;\n  }();\n\n  return StickySidebar;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (StickySidebar); // Global\n// -------------------------\n\nwindow.StickySidebar = StickySidebar;\n\n//# sourceURL=webpack:///./node_modules/sticky-sidebar/src/sticky-sidebar.js?");

/***/ }),

/***/ "./sticky-widget-area.css":
/*!********************************!*\
  !*** ./sticky-widget-area.css ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"sticky-widget-area.css\";\n\n//# sourceURL=webpack:///./sticky-widget-area.css?");

/***/ }),

/***/ "./sticky-widget-area.js":
/*!*******************************!*\
  !*** ./sticky-widget-area.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! css-element-queries */ \"./node_modules/css-element-queries/index.js\");\n/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(css_element_queries__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sticky_sidebar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sticky-sidebar */ \"./node_modules/sticky-sidebar/src/sticky-sidebar.js\");\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar sidebar;\nwindow.ResizeSensor = css_element_queries__WEBPACK_IMPORTED_MODULE_0__[\"ResizeSensor\"];\n\nvar updateSticky = function updateSticky() {\n  if (sidebar) {\n    sidebar.updateSticky();\n    window.requestAnimationFrame(function () {\n      sidebar.updateSticky();\n    });\n  }\n};\n\nvar readyHandler = function readyHandler(event) {\n  if (sidebar) {\n    sidebar.destroy();\n    sidebar = null;\n  }\n\n  var sidebarElement = document.querySelector('*[data-sticky-widget-area-role=\"sidebar\"]');\n  var containerElement = document.querySelector('*[data-sticky-widget-area-role=\"container\"]');\n  var sidebarInnerElement = document.querySelector('*[data-sticky-widget-area-role=\"sidebar-inner\"]');\n\n  if (sidebarElement && containerElement) {\n    var adminBar = document.querySelector('#wpadminbar');\n    var optionsEncoded = sidebarElement.getAttribute('data-sticky-widget-area-options');\n\n    var optionsDecoded = _objectSpread({}, JSON.parse(decodeURIComponent(optionsEncoded)));\n\n    var topSpacing = 0;\n\n    if (adminBar) {\n      topSpacing += adminBar.getBoundingClientRect().height;\n    }\n\n    topSpacing += optionsDecoded.topSpacing ? optionsDecoded.topSpacing : 0;\n\n    var options = _objectSpread({\n      resizeSensor: true,\n      topSpacing: 0,\n      bottomSpacing: 0,\n      containerSelector: '*[data-sticky-widget-area-role=\"container\"]',\n      innerWrapperSelector: '*[data-sticky-widget-area-role=\"sidebar-inner\"]',\n      minWidth: 768\n    }, optionsDecoded, _defineProperty({}, \"topSpacing\", topSpacing));\n\n    console.log('sidebar options', options);\n    sidebar = new sticky_sidebar__WEBPACK_IMPORTED_MODULE_1__[\"default\"](sidebarElement, options);\n    window.requestAnimationFrame(updateSticky);\n  }\n};\n\ndocument.addEventListener('turbolinks:load', readyHandler);\ndocument.addEventListener('DOMContentLoaded', readyHandler);\nwindow.addEventListener('resize', updateSticky);\n\n//# sourceURL=webpack:///./sticky-widget-area.js?");

/***/ }),

/***/ 0:
/*!**************************************************************!*\
  !*** multi ./sticky-widget-area.js ./sticky-widget-area.css ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./sticky-widget-area.js */\"./sticky-widget-area.js\");\nmodule.exports = __webpack_require__(/*! ./sticky-widget-area.css */\"./sticky-widget-area.css\");\n\n\n//# sourceURL=webpack:///multi_./sticky-widget-area.js_./sticky-widget-area.css?");

/***/ })

/******/ });